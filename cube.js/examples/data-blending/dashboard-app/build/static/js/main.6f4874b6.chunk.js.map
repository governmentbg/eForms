{"version":3,"sources":["logo.svg","components/Header.js","components/Stack.js","components/SchemaCube.js","components/Line.js","components/Query.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","target","rel","src","logo","alt","staticOptions","chart","type","styledMode","spacingRight","spacingLeft","credits","enabled","xAxis","categories","yAxis","title","gridLineColor","max","legend","align","colors","plotOptions","column","stacking","data","useState","options","setOptions","useEffect","console","log","text","useHTML","series","highcharts","Highcharts","setData","result","useCubeQuery","measures","timeDimensions","dimension","dateRange","granularity","resultSet","temp","name","stack","tablePivot","forEach","item","push","parseFloat","Stack","line","lineWidth","marker","symbol","responsive","rules","condition","maxWidth","chartOptions","layout","verticalAlign","parseInt","Line","Fragment","gutter","sm","lg","Query","SchemaCube","cubejsApi","cubejs","process","apiUrl","App","Content","Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f4874b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d3e9f673.svg\";","import React from 'react';\nimport { Layout } from 'antd';\nimport * as Icon from '@ant-design/icons';\nimport logo from './../logo.svg';\n\nconst Header = () => (\n  <Layout.Header className='example__header'>\n    <div className='examples__nav'>\n      <div className='examples__title'>\n        <a href='//cube.dev' target='_blank' rel='noopener noreferrer'>\n          <img src={logo} alt='Cube.js' />\n        </a>\n        <h1>Data Blending example</h1>\n      </div>\n      <div className='examples__nav__buttons'>\n        <a href='//github.com/cube-js/cube.js/tree/master/examples/compare-date-range'>\n          <Icon.GithubOutlined />\n          Github\n        </a>\n        <a href='//slack.cube.dev'>\n          <Icon.SlackOutlined />\n          Slack\n        </a>\n      </div>\n    </div>\n  </Layout.Header>\n);\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\n\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nconst staticOptions = {\n  chart: {\n    type: 'column',\n    styledMode: true,\n    spacingRight: 25,\n    spacingLeft: 20,\n  },\n  credits: {\n    enabled: false,\n  },\n  xAxis: {\n    categories: [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ],\n  },\n\n  yAxis: {\n    title: {\n      enabled: false,\n    },\n    gridLineColor: '#D0D0DA40',\n    max: 110,\n  },\n\n  legend: {\n    align: 'center',\n  },\n  colors: ['#FF6492', '#7A77FF', '#FFC3BA'],\n  plotOptions: {\n    column: {\n      stacking: 'normal',\n    },\n  },\n};\n\nexport default ({ title, data }) => {\n  const [options, setOptions] = useState({});\n  useEffect(() => {\n    console.log(data);\n    setOptions({\n      ...staticOptions,\n      title: {\n        text: `Sales in % by channel <small>implemented with ${title}</small>`,\n        useHTML: true,\n      },\n      series: data,\n    });\n  }, [data, title]);\n\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\n};\n","import React, { useState, useEffect } from 'react';\nimport { useCubeQuery } from '@cubejs-client/react';\n\nimport Stack from './Stack';\n\nexport default () => {\n  const [data, setData] = useState([]);\n\n  const { resultSet: result } = useCubeQuery({\n    measures: [\n      'AllSales.onlineRevenuePercentage',\n      'AllSales.offlineRevenuePercentage',\n      'AllSales.commonPercentage',\n    ],\n    timeDimensions: [\n      {\n        dimension: 'AllSales.createdAt',\n        dateRange: ['2022-01-01', '2022-12-31'],\n        granularity: 'month',\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (result) {\n      const temp = [\n        {\n          name: 'Online',\n          data: [],\n          stack: 'half',\n        },\n        {\n          name: 'Offline',\n          data: [],\n          stack: 'half',\n        },\n        {\n          name: 'All sales',\n          data: [],\n          stack: 'common',\n        },\n      ];\n      result.tablePivot().forEach((item) => {\n        temp[0].data.push(parseFloat(item['AllSales.onlineRevenuePercentage']));\n        temp[1].data.push(\n          parseFloat(item['AllSales.offlineRevenuePercentage'])\n        );\n        temp[2].data.push(parseFloat(item['AllSales.commonPercentage']));\n      });\n      setData(temp);\n    }\n  }, [result]);\n\n  return <Stack data={data} title={'a Data Blending cube'} />;\n};\n","import React, { useState, useEffect } from 'react';\n\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nconst staticOptions = {\n  chart: {\n    type: 'line',\n    styledMode: true,\n    spacingRight: 25,\n    spacingLeft: 20,\n  },\n  credits: {\n    enabled: false,\n  },\n  xAxis: {\n    categories: [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ],\n  },\n\n  yAxis: {\n    title: {\n      enabled: false,\n    },\n    gridLineColor: '#D0D0DA40',\n  },\n\n  legend: {\n    align: 'center',\n  },\n  colors: ['#FF6492', '#7A77FF', '#FFC3BA'],\n  plotOptions: {\n    line: {\n      lineWidth: 1.5,\n      marker: {\n        symbol: 'circle',\n      },\n    },\n  },\n  responsive: {\n    rules: [\n      {\n        condition: {\n          maxWidth: 500,\n        },\n        chartOptions: {\n          legend: {\n            layout: 'horizontal',\n            align: 'center',\n            verticalAlign: 'bottom',\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport default ({ title, data }) => {\n  const [options, setOptions] = useState({});\n  useEffect(() => {\n    setOptions({\n      ...staticOptions,\n      title: {\n        text: `Orders by status <small>implemented with ${title}</small>`,\n        useHTML: true,\n      },\n      series: data,\n    });\n  }, [data, title]);\n\n  return <HighchartsReact highcharts={Highcharts} options={options} />;\n};\n","import React, { useState, useEffect } from 'react';\nimport { useCubeQuery } from '@cubejs-client/react';\n\nimport Line from './Line';\n\nexport default () => {\n  const [data, setData] = useState([]);\n  const { resultSet } = useCubeQuery([\n    {\n      measures: ['Orders.count'],\n      timeDimensions: [\n        {\n          dimension: 'Orders.createdAt',\n          dateRange: ['2022-01-01', '2022-12-31'],\n          granularity: 'month',\n        },\n      ],\n    },\n    {\n      measures: ['OrdersOffline.count'],\n      timeDimensions: [\n        {\n          dimension: 'OrdersOffline.createdAt',\n          dateRange: ['2022-01-01', '2022-12-31'],\n          granularity: 'month',\n        },\n      ],\n    },\n  ]);\n  useEffect(() => {\n    if (resultSet) {\n      const temp = [\n        {\n          name: 'Online',\n          data: [],\n        },\n        {\n          name: 'Offline',\n          data: [],\n        },\n        {\n          name: 'All sales',\n          data: [],\n        },\n      ];\n      resultSet.tablePivot().forEach((item) => {\n        temp[0].data.push(parseInt(item['Orders.count']));\n        temp[1].data.push(parseInt(item['OrdersOffline.count']));\n        temp[2].data.push(\n          parseInt(item['Orders.count']) + parseInt(item['OrdersOffline.count'])\n        );\n      });\n      setData(temp);\n    }\n  }, [resultSet]);\n\n  return <Line data={data} title={'a Data Blending query'} />;\n};\n","import React from 'react';\nimport { Row, Col } from 'antd';\nimport SchemaCube from './SchemaCube';\nimport Query from './Query';\n\nexport default () => {\n  return (\n    <React.Fragment>\n      <Row gutter={20} className='dashboard__row'>\n        <Col sm={24} lg={12}>\n          <div className='dashboard__cell'>\n            <Query />\n          </div>\n        </Col>\n        <Col sm={24} lg={12}>\n          <div className='dashboard__cell'>\n            <SchemaCube />\n          </div>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Layout } from 'antd';\nimport cubejs from '@cubejs-client/core';\nimport { CubeProvider } from '@cubejs-client/react';\nimport Header from './components/Header';\nimport Dashboard from './components/Dashboard';\n\nconst cubejsApi = cubejs(process.env.REACT_APP_CUBEJS_TOKEN, {\n  apiUrl: process.env.REACT_APP_API_URL\n});\n\nconst App = () => (\n  <CubeProvider cubejsApi={cubejsApi}>\n    <Layout>\n      <Header />\n      <Layout.Content className='examples__container'>\n        <Dashboard />\n      </Layout.Content>\n    </Layout>\n  </CubeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}